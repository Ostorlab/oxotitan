import type { AxiosInstance } from 'axios'
import RequestHandler from '~/utils/requestHandler'
import type { Scanner } from '~/project/types'
import type { Maybe, OxoAggregatedKnowledgeBaseVulnerabilityType, OxoVulnerabilitiesType, OxoVulnerabilityType } from '~/graphql/types'

const QUERY_WITH_VULN_INFO = gql`
query Vulnerabilities(
    $scanId: Int!,
    $kbDetailTitle: String!,
    $vulnDetailTitles: [String!]!,
    $numberElements: Int,
    $page: Int
) {
    scan(scanId: $scanId) {
        id
        kbVulnerabilities(detailTitle: $kbDetailTitle) {
            highestRiskRating
            vulnerabilities(detailTitles: $vulnDetailTitles, numberElements: $numberElements, page: $page) {
                pageInfo {
                  count
                  numPages
                  hasNext
                  hasPrevious
                }
                vulnerabilities {
                    id
                    technicalDetail
                    riskRating
                    cvssV3Vector
                    dna
                    cvssV3BaseScore
                    detail {
                        title
                        shortDescription
                        description
                        recommendation
                        references {
                          title
                          url
                        }
                    }
                }
            }
        }
    }
}
`

const QUERY_WITH_VULN_BY_ID_INFO = gql`
query Vulnerabilities (
    $scanId: Int!,
    $vulnIds: [Int!]!,
) {
    scan(scanId: $scanId) {
        id
        vulnerabilities(vulnIds: $vulnIds) {
            vulnerabilities {
                id
                technicalDetail
                riskRating
                cvssV3Vector
                dna
                cvssV3BaseScore
                detail {
                    title
                    shortDescription
                    description
                    recommendation
                    references
                }
            }
        }
    }
}
`

const QUERY_WITHOUT_VULN_INFO = gql`
query Vulnerabilities (
    $scanId: Int!,
    $page: Int!,
    $numberElements: Int!,
    $detailTitles: [String!]!
) {
    scan(scanId: $scanId) {
        id
        vulnerabilities(page: $page, numberElements: $numberElements, detailTitles: $detailTitles) {
            vulnerabilities {
                id
                technicalDetail
                riskRating
                cvssV3Vector
                cvssV3BaseScore
            }
        }
    }
}

`

export default class VulnerabilityService {
  private readonly requestHandler: RequestHandler
  hasNext: boolean

  constructor(axios: AxiosInstance) {
    this.requestHandler = new RequestHandler(axios)
    this.hasNext = true
  }

  /**
   * Get vulnerabilities with details.
   */
  async getVulnerabilitiesWithInfo({
    scanner,
    scanId,
    vulnDetailTitles,
    kbDetailTitle,
    page,
    numberElements
  }: {
    scanner: Scanner
    scanId: number
    vulnDetailTitles: Array<string>
    kbDetailTitle: string
    page: number
    numberElements: number
  }): Promise<Maybe<Array<Maybe<OxoAggregatedKnowledgeBaseVulnerabilityType>>>> {
    const res = await this.requestHandler.post(scanner, {
      query: QUERY_WITH_VULN_INFO,
      variables: {
        scanId,
        vulnDetailTitles,
        page,
        numberElements,
        kbDetailTitle
      }
    })
    this.hasNext = res?.data?.data?.scan?.kbVulnerabilities[0]?.vulnerabilities?.pageInfo?.hasNext || false
    return res?.data?.data?.scan?.kbVulnerabilities || []
  }

  /**
   * Get a single vulnerability with details.
   */
  async getVulnerabilityByIdWithInfo({ scanner, scanId, vulnIds }: { scanner: Scanner, scanId: number, vulnIds: Array<number> }): Promise<Maybe<OxoVulnerabilitiesType>> {
    const res = await this.requestHandler.post(scanner, {
      query: QUERY_WITH_VULN_BY_ID_INFO,
      variables: {
        scanId,
        vulnIds
      }
    })
    return res?.data?.data?.scan?.vulnerabilities || { vulnerabilities: [] }
  }

  /**
   * Get vulnerabilities without details.
   */
  async getVulnerabilitiesWithoutInfo({ scanner, scanId, detailTitles, page, numberElements }: {
    scanner: Scanner
    scanId: number
    detailTitles: Array<string>
    page: number
    numberElements: number
  }): Promise<Array<Maybe<OxoVulnerabilityType>>> {
    const res = await this.requestHandler.post(scanner, {
      query: QUERY_WITHOUT_VULN_INFO,
      variables: {
        scanId,
        detailTitles,
        page,
        numberElements
      }
    })
    this.hasNext = res?.data?.data?.scan?.vulnerabilities?.pageInfo?.hasNext || false
    return res?.data?.data?.scan?.vulnerabilities?.vulnerabilities || []
  }
}
